{"version":3,"sources":["components/MenuDetails.js","components/Menu.js","shared/dishes.js","App.js","serviceWorker.js","index.js"],"names":["MenuDetails","props","dish","this","selectedDish","Card","style","width","variant","CardBody","CardTitle","name","CardText","description","Component","Menu","state","setState","menu","dishes","map","key","id","className","onClick","onDishSelect","CardImg","src","image","alt","renderDish","Dishes","category","label","price","comments","rating","comment","author","date","App","Navbar","dark","color","NavbarBrand","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.71dba7fc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Card, CardText, CardBody, CardTitle } from 'reactstrap';\n\nclass MenuDetails extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const dish = this.props.selectedDish;\n\n        return (\n            <Card style={{ width: '44rem' }} variant=\"top\">\n                <CardBody>\n                    <CardTitle>{dish.name}</CardTitle>\n                    <CardText>{dish.description}</CardText>\n                </CardBody>\n            </Card>\n        )\n    }\n}\n\nexport default MenuDetails;","import React, { Component } from 'react';\nimport { Card, CardImg, CardBody, CardTitle } from 'reactstrap';\nimport MenuDetails from \"./MenuDetails\";\n\nclass Menu extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selectedDish: null\n        }\n    }\n\n    onDishSelect(dish) {\n        this.setState({ selectedDish: dish });\n    }\n\n    renderDish(dish) {\n        if (dish != null) {\n            return (\n                <MenuDetails selectedDish={this.state.selectedDish}></MenuDetails>\n            );\n        } else {\n            return (\n                <div></div>\n            )\n        }\n    }\n\n    render() {\n        const menu = this.props.dishes.map((dish) => {\n            return (\n                <div key={dish.id} className=\"col-12 col-md-4 m-1\">\n                    <Card style={{ width: '20rem' }} variant=\"top\"\n                        onClick={() => this.onDishSelect(dish)}>\n                        <CardImg src={dish.image} alt={dish.name} />\n                        <CardBody>\n                            <CardTitle>{dish.name}</CardTitle>\n                        </CardBody>\n                    </Card>\n                </div>\n            );\n        });\n\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-12 col-md-4 m-1\">\n                        {this.renderDish(this.state.selectedDish)}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    {menu}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Menu;","export const Dishes =\n    [\n        {\n            id: 0,\n            name: 'Uthappizza',\n            image: 'assets/images/uthappizza.png',\n            category: 'mains',\n            label: 'Hot',\n            price: '4.99',\n            description: 'A unique combination of Indian Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer.',\n            comments: [\n                {\n                    id: 0,\n                    rating: 5,\n                    comment: \"Imagine all the eatables, living in conFusion!\",\n                    author: \"John Lemon\",\n                    date: \"2012-10-16T17:57:28.556094Z\"\n                },\n                {\n                    id: 1,\n                    rating: 4,\n                    comment: \"Sends anyone to heaven, I wish I could get my mother-in-law to eat it!\",\n                    author: \"Paul McVites\",\n                    date: \"2014-09-05T17:57:28.556094Z\"\n                },\n                {\n                    id: 2,\n                    rating: 3,\n                    comment: \"Eat it, just eat it!\",\n                    author: \"Michael Jaikishan\",\n                    date: \"2015-02-13T17:57:28.556094Z\"\n                },\n                {\n                    id: 3,\n                    rating: 4,\n                    comment: \"Ultimate, Reaching for the stars!\",\n                    author: \"Ringo Starry\",\n                    date: \"2013-12-02T17:57:28.556094Z\"\n                },\n                {\n                    id: 4,\n                    rating: 2,\n                    comment: \"It's your birthday, we're gonna party!\",\n                    author: \"25 Cent\",\n                    date: \"2011-12-02T17:57:28.556094Z\"\n                }\n            ]\n        },\n        {\n            id: 1,\n            name: 'Zucchipakoda',\n            image: 'assets/images/zucchipakoda.png',\n            category: 'appetizer',\n            label: '',\n            price: '1.99',\n            description: 'Deep fried Zucchini coated with mildly spiced Chickpea flour batter accompanied with a sweet-tangy tamarind sauce',\n            comments: [\n                {\n                    id: 0,\n                    rating: 5,\n                    comment: \"Imagine all the eatables, living in conFusion!\",\n                    author: \"John Lemon\",\n                    date: \"2012-10-16T17:57:28.556094Z\"\n                },\n                {\n                    id: 1,\n                    rating: 4,\n                    comment: \"Sends anyone to heaven, I wish I could get my mother-in-law to eat it!\",\n                    author: \"Paul McVites\",\n                    date: \"2014-09-05T17:57:28.556094Z\"\n                },\n                {\n                    id: 2,\n                    rating: 3,\n                    comment: \"Eat it, just eat it!\",\n                    author: \"Michael Jaikishan\",\n                    date: \"2015-02-13T17:57:28.556094Z\"\n                },\n                {\n                    id: 3,\n                    rating: 4,\n                    comment: \"Ultimate, Reaching for the stars!\",\n                    author: \"Ringo Starry\",\n                    date: \"2013-12-02T17:57:28.556094Z\"\n                },\n                {\n                    id: 4,\n                    rating: 2,\n                    comment: \"It's your birthday, we're gonna party!\",\n                    author: \"25 Cent\",\n                    date: \"2011-12-02T17:57:28.556094Z\"\n                }\n            ]\n        },\n        {\n            id: 2,\n            name: 'Vadonut',\n            image: 'assets/images/vadonut.png',\n            category: 'appetizer',\n            label: 'New',\n            price: '1.99',\n            description: 'A quintessential ConFusion experience, is it a vada or is it a donut?',\n            comments: [\n                {\n                    id: 0,\n                    rating: 5,\n                    comment: \"Imagine all the eatables, living in conFusion!\",\n                    author: \"John Lemon\",\n                    date: \"2012-10-16T17:57:28.556094Z\"\n                },\n                {\n                    id: 1,\n                    rating: 4,\n                    comment: \"Sends anyone to heaven, I wish I could get my mother-in-law to eat it!\",\n                    author: \"Paul McVites\",\n                    date: \"2014-09-05T17:57:28.556094Z\"\n                },\n                {\n                    id: 2,\n                    rating: 3,\n                    comment: \"Eat it, just eat it!\",\n                    author: \"Michael Jaikishan\",\n                    date: \"2015-02-13T17:57:28.556094Z\"\n                },\n                {\n                    id: 3,\n                    rating: 4,\n                    comment: \"Ultimate, Reaching for the stars!\",\n                    author: \"Ringo Starry\",\n                    date: \"2013-12-02T17:57:28.556094Z\"\n                },\n                {\n                    id: 4,\n                    rating: 2,\n                    comment: \"It's your birthday, we're gonna party!\",\n                    author: \"25 Cent\",\n                    date: \"2011-12-02T17:57:28.556094Z\"\n                }\n            ]\n        },\n        {\n            id: 3,\n            name: 'ElaiCheese Cake',\n            image: 'assets/images/elaicheesecake.png',\n            category: 'dessert',\n            label: '',\n            price: '2.99',\n            description: 'A delectable, semi-sweet New York Style Cheese Cake, with Graham cracker crust and spiced with Indian cardamoms',\n            comments: [\n                {\n                    id: 0,\n                    rating: 5,\n                    comment: \"Imagine all the eatables, living in conFusion!\",\n                    author: \"John Lemon\",\n                    date: \"2012-10-16T17:57:28.556094Z\"\n                },\n                {\n                    id: 1,\n                    rating: 4,\n                    comment: \"Sends anyone to heaven, I wish I could get my mother-in-law to eat it!\",\n                    author: \"Paul McVites\",\n                    date: \"2014-09-05T17:57:28.556094Z\"\n                },\n                {\n                    id: 2,\n                    rating: 3,\n                    comment: \"Eat it, just eat it!\",\n                    author: \"Michael Jaikishan\",\n                    date: \"2015-02-13T17:57:28.556094Z\"\n                },\n                {\n                    id: 3,\n                    rating: 4,\n                    comment: \"Ultimate, Reaching for the stars!\",\n                    author: \"Ringo Starry\",\n                    date: \"2013-12-02T17:57:28.556094Z\"\n                },\n                {\n                    id: 4,\n                    rating: 2,\n                    comment: \"It's your birthday, we're gonna party!\",\n                    author: \"25 Cent\",\n                    date: \"2011-12-02T17:57:28.556094Z\"\n                }\n            ]\n        }\n    ];","import React, { Component } from 'react';\nimport { Navbar, NavbarBrand } from 'reactstrap';\nimport Menu from './components/Menu';\nimport './App.css';\nimport { Dishes } from './shared/dishes';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dishes: Dishes\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Navbar dark color=\"primary\">\n                    <div className=\"container\">\n                        <NavbarBrand href=\"/\">My Restaurant</NavbarBrand>\n                    </div>\n                </Navbar>\n                <Menu dishes={this.state.dishes} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}